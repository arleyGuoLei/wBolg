<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Js闭包]]></title>
    <url>%2F2018%2F10%2F18%2FJs%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[一般情况一个函数（函数作用域）执行完毕，里面声明的变量会全部释放，被垃圾回收器回收。但闭包利用一个技巧，让作用域里面的变量，在函数执行完之后依旧保存没有被垃圾回收处理掉。 例1 12345678910111213141516171819202122232425262728293031function outer()&#123; var a = 1; function inner()&#123; return a++; &#125; return inner;&#125;var abc = outer();//outer()只要执行过，就有了引用函数内部变量的可能，然后就会被保存在内存中；//outer()如果没有执行过，由于作用域的关系，看不到内部作用域，更不会被保存在内存中了；console.log(abc());//1console.log(abc());//2//因为a已经在内存中了，所以再次执行abc()的时候，是在第一次的基础上累加的abc = null;//由于闭包占用内存空间，所以要谨慎使用闭包。尽量在使用完闭包后，及时解除引用，释放内存；// 直接返回函数function outer2()&#123; var t = 1; return function ()&#123; console.log(t++); &#125;&#125;var a = outer2();a();//1a();//2a();//3a = null; 例2 12345678910function foo(tmp) &#123; return function () &#123; alert((tmp++)); &#125;&#125;var bar = foo(1); // bar 现在是一个闭包bar();//1bar();//2bar();//3bar();//4 例3 闭包混入立即执行函数 123456789var btnList = document.getElementsByClassName("btn"), len = btnList.length;for (var i = 0; i &lt; len; i++) &#123; (function (j) &#123; btnList[j].onclick = function () &#123; console.log("第" + j + "个按钮被点击到了") &#125; &#125;)(i)&#125; 这又哪里产生了闭包了。别急，我们一个个分析。for循环每一次都执行一个 IIEF （自执行函数），每一次变量 i 被当做参数传到IIEF中去 ， 那么这个自执行函数中创建了一个变量，参数 j 然后元素节点 btnList 绑定一个onclick事件，执行函数里面需要用到这个参数 j ，但是你又没点 ， 那么这个遍历 j 就没有被清理 ， 就一直在参数里面被保存着 ， 每一个IIEF都做一样的事情 ， 所以这个时候就产生了闭包 ， 变量 j 并没有被回收，依然在等待你使用。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Js面试题整理]]></title>
    <url>%2F2018%2F10%2F18%2FJs%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[持续更新ing… 立即执行函数(IIFE) 立即执行函数是指声明完之后便直接执行的函数，这类函数通常是一次性使用的，因此没必要给这类函数命名，直接让它执行就好了； 主要目的是做的一些封装，防止变量全局污染，以及保证内部变量的安全； javascript中没用私有作用域的概念，如果在多人开发的项目上，你在全局或局部作用域中声明了一些变量，可能会被其他人不小心用同名的变量给覆盖掉，根据javascript函数作用域链的特性，可以使用IIFE可以模仿一个私有作用域，用匿名函数作为一个“容器”，“容器”内部可以访问外部的变量，而外部环境不能访问“容器”内部的变量，所以( function(){…} )()内部定义的变量不会和外部的变量发生冲突，俗称“匿名包裹器”或“命名空间”。 123456var liList = ul.getElementsByTagName('li')for(var i=0; i&lt;6; i++)&#123; liList[i].onclick = function()&#123; alert(i) // 为什么 alert 出来的总是 6，而不是 0、1、2、3、4、5 &#125;&#125; 为什么 alert 的总是 6 呢，因为 i 是贯穿整个作用域的，而不是给每个 li 分配了一个 i，如下： 那么怎么解决这个问题呢？用立即执行函数给每个 li 创造一个独立作用域即可（当然还有其他办法）： 12345678var liList = ul.getElementsByTagName('li')for(var i=0; i&lt;6; i++)&#123; (function(ii)&#123; liList[ii].onclick = function()&#123; alert(ii) // 0、1、2、3、4、5 &#125; &#125;)(i)&#125; 在立即执行函数执行的时候，i 的值被赋值给 ii，此后 ii 的值一直不变。 i 的值从 0 变化到 5，对应 6 个立即执行函数，这 6 个立即执行函数里面的 ii 「分别」是 0、1、2、3、4、5。 闭包将代码修改功能为一秒后输出1~5(在for循环之内完成)1234567for (var i = 1; i &lt;= 5; i++) &#123; setTimeout( function timer() &#123; console.log(i); &#125;, 1000 );&#125; 方法① 闭包 1234567for (var i = 1; i &lt;= 5; i++) &#123; (function (ii) &#123; setTimeout(function timer() &#123; console.log(ii); &#125;, 1000); &#125;)(i)&#125; 方法② let 12345for (let i = 1; i &lt;= 5; i++) &#123; setTimeout(function timer() &#123; console.log(i); &#125;, 1000);&#125; 第二题 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;script type="text/javascript"&gt; //面试经典问题: function onMyLoad()&#123; /* 抛出问题: 此题的目的是想每次点击对应目标时弹出对应的数字下标 0~4,但实际是无论点击哪个目标都会弹出数字5 问题所在: arr 中的每一项的 onclick 均为一个函数实例(Function 对象),这个函数实例也产生了一个闭包域, 这个闭包域引用了外部闭包域的变量,其 function scope 的 closure 对象有个名为 i 的引用, 外部闭包域的私有变量内容发生变化,内部闭包域得到的值自然会发生改变 */ var arr = document.getElementsByTagName("p"); for(var i = 0; i &lt; arr.length;i++)&#123; arr[i].onclick = function()&#123; alert(i); &#125; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body onload="onMyLoad()"&gt; &lt;p&gt;产品一&lt;/p&gt; &lt;p&gt;产品二&lt;/p&gt; &lt;p&gt;产品三&lt;/p&gt; &lt;p&gt;产品四&lt;/p&gt; &lt;p&gt;产品五&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 用多种方法解决 方法一 123456789101112131415/*解决思路: 增加若干个对应的闭包域空间(这里采用的是匿名函数),专门用来存储原先需要引用的内容(下标),不过只限于基本类型(基本类型值传递,对象类型引用传递) */for(var i = 0;i&lt;arr.length;i++)&#123; //声明一个匿名函数,若传进来的是基本类型则为值传递,故不会对实参产生影响, //该函数对象有一个本地私有变量arg(形参) ,该函数的 function scope 的 closure 对象属性有两个引用,一个是 arr,一个是 i //尽管引用 i 的值随外部改变 ,但本地私有变量(形参) arg 不会受影响,其值在一开始被调用的时候就决定了. (function (arg) &#123; arr[i].onclick = function () &#123; //onclick函数实例的 function scope 的 closure 对象属性有一个引用 arg, alert(arg); //只要 外部空间的 arg 不变,这里的引用值当然不会改变 &#125; &#125;)(i); //立刻执行该匿名函数,传递下标 i(实参)&#125; 方法二 12345678910111213/*解决思路: 将下标作为对象属性(name:"i",value:i的值)添加到每个数组项(p对象)中*/for(var i = 0;i&lt;arr.length;i++)&#123; //为当前数组项即当前 p 对象添加一个名为 i 的属性,值为循环体的 i 变量的值, //此时当前 p 对象的 i 属性并不是对循环体的 i 变量的引用,而是一个独立p 对象的属性,属性值在声明的时候就确定了 //(基本类型的值都是存在栈中的,当有一个基本类型变量声明其等于另一个基本变量时,此时并不是两个基本类型变量都指向一个值,而是各自有各自的值,但值是相等的) arr[i].i = i; arr[i].onclick = function () &#123; alert(this.i); &#125;&#125; 方法三 123456789101112131415/*解决思路: 与解决办法一有点相似但却有点不太相似. 相似点:同样是增加若干个对应的闭包域空间用来存储下标 不同点:解决办法一是在新增的匿名闭包空间内完成事件的绑定,而此例是将事件绑定在新增的匿名函数返回的函数上 此时绑定的函数中的 function scope 中的 closure 对象的 引用 arg 是指向将其返回的匿名函数的私有变量 arg */for(var i = 0; i&lt;arr.length;i++)&#123; arr[i].onclick = (function(arg)&#123; return function () &#123; alert(arg); &#125; &#125;)(i);&#125; 方法四 1234567891011/*解决思路与解决办法一相同 */for(var i = 0; i&lt;arr.length;i++)&#123; (function()&#123; var temp = i; arr[i].onclick = function () &#123; alert(temp); &#125; &#125;)();&#125; 方法五 1234567891011/*解决思路与解决办法三及四相同 */for(var i = 0;i&lt;arr.length;i++)&#123; arr[i].onclick = (function () &#123; var temp = i; return function () &#123; alert(temp); &#125; &#125;)();&#125; 方法六 12345678"use strict";//使用严格模式,否则报错 SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict modevar arr = document.getElementsByTagName("p");for(var i = 0;i&lt;arr.length;i++)&#123; let j = i;//创建一个块级变量 arr[i].onclick = function () &#123; alert(j); &#125;&#125; 本题自己做计算器的时候测试了一部分方法： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//方法一for (var i = 0; i &lt; numDom.length; i++) &#123; (function(val)&#123; numDom[val].onclick = function()&#123; var num = numDom[val].getAttribute("data-num"); result.value = num; &#125; &#125;)(i);&#125;// 方法二for (var i = 0; i &lt; numDom.length; i++) &#123; numDom[i].i = i; numDom[i].onclick = function () &#123; var num = numDom[this.i].getAttribute("data-num"); result.value = num; &#125;&#125;// 方法三for (var i = 0; i &lt; numDom.length; i++) &#123; numDom[i].i = i; numDom[i].onclick = (function (arg) &#123; return function()&#123; var num = numDom[arg].getAttribute("data-num"); result.value = num; &#125; &#125;)(i); &#125;// 方法四for (var i = 0; i &lt; numDom.length; i++) &#123; (function () &#123; var temp = i; numDom[i].onclick = function () &#123; var num = numDom[temp].getAttribute("data-num"); result.value = num; &#125; &#125;)();&#125;// 方法五for (var i = 0; i &lt; numDom.length; i++) &#123; numDom[i].i = i; numDom[i].onclick = (function () &#123; var temp = i; return function () &#123; var num = numDom[temp].getAttribute("data-num"); result.value = num; &#125; &#125;)();&#125;]]></content>
      <categories>
        <category>面试集锦</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Js立即执行函数(转)]]></title>
    <url>%2F2018%2F10%2F18%2FJs%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[这是 JS 中的一个常见概念，面试时经常会被问到，请「用自己的语言」简述 立即执行函数是什么 立即执行函数有什么用途 立即执行函数是什么立即执行函数就是 声明一个匿名函数 马上调用这个匿名函数 上面是一个典型的立即执行函数。 首先声明一个匿名函数 function(){alert(&#39;我是匿名函数&#39;)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。 那么为什么还要用另一对括号把匿名函数包起来呢？其实是为了兼容 JS 的语法。 如果我们不加另一对括号，直接写成 function(){alert(‘我是匿名函数’)}()浏览器会报语法错误。想要通过浏览器的语法检查，必须加点小东西，比如下面几种 12345678( function()&#123;alert('我是匿名函数')&#125;() ) // 用括号把整个表达式包起来( function ()&#123; alert('我是匿名函数')&#125; )() //!function()&#123;alert('我是匿名函数')&#125;() // 求反，我们不在意值是多少，只想通过语法检查。+function()&#123;alert('我是匿名函数')&#125;()-function()&#123;alert('我是匿名函数')&#125;()~function()&#123;alert('我是匿名函数')&#125;()void function()&#123;alert('我是匿名函数')&#125;()new function()&#123;alert('我是匿名函数')&#125;() 立即执行函数有什么用？只有一个作用：创建一个独立的作用域。这个作用域里面的变量，外面访问不到（即避免「变量污染」）。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6面试题整理]]></title>
    <url>%2F2018%2F10%2F18%2FES6%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[这年头，到处都是ES6…持续更新ing… let和const let是更完美的var，不是全局变量，具有块级函数作用域,大多数情况不会发生变量提升。const定义常量值，不能够重新赋值，如果值是一个对象，可以改变对象里边的属性值。 1、let声明的变量具有块级作用域2、let声明的变量不能通过window.变量名进行访问3、形如for(let x..)的循环是每次迭代都为x创建新的绑定 下面是var带来的不合理场景 1234567var arr = [];for (var i = 0; i &lt; 10; i++) &#123; arr[i] = function () &#123; console.log(i); &#125;&#125;arr[5]() //10 在上述代码中，变量i是var声明的，在全局范围类都有效，所以用来计数的循环变量泄露为全局变量。所以每一次循环，新的i值都会覆盖旧值，导致最后输出都是10。 而如果对循环使用let语句的情况，那么每次迭代都是为x创建新的绑定代码如下： 1234567var arr = [];for (let i = 0; i &lt; 10; i++) &#123; arr[i] = function () &#123; console.log(i); &#125;&#125;arr[5]() //5,a[5]输出f()&#123;console.log(i);&#125;,后面加个括号代表执行f() 【拓展】当然，除了这种方式让数组找中的各个元素分别是不同的函数，我们还可以采用ES5中的闭包和立即函数两种方法。 1、采用闭包12345678910function showNum(i) &#123; return function () &#123; console.log(i) &#125;&#125;var a = []for (var i = 0; i &lt; 5; i++) &#123; a[i] = showNum(i)(); //循环输出1,2,3,4&#125;//a的每一个成员都是undefined 2、采用立即执行函数123456789var a = []for (var i = 0; i &lt; 5; i++) &#123; a[i] = (function (i) &#123; return function () &#123; console.log(i) &#125; &#125;)(i)&#125;a[2](); //2 【面试】把以下代码使用两种方法，依次输出0-9 123456789var funcs = []for (var i = 0; i &lt; 10; i++) &#123; funcs.push(function () &#123; console.log(i) &#125;)&#125;funcs.forEach(function (func) &#123; func(); //输出十个10&#125;) 方法一：使用立即执行函数 12345678910111213var funcs = []for (var i = 0; i &lt; 10; i++) &#123; funcs.push( ( function (value) &#123;return function () &#123;console.log(value)&#125;&#125;(i) ) )&#125;funcs.forEach(function (func) &#123; func(); //依次输出0-9&#125;) 看方法一的时候，会有和我一样心情的人么 ↓？得，我去补习js闭包和立即执行函数的知识...了1234(function(val)&#123;console.log(val);&#125;)("这样输出很牛b？");(function () &#123; return function (val) &#123; console.log(val); &#125; &#125;)()("那我可就更牛b了");(function()&#123;return (function () &#123; return function (val) &#123; console.log(val); &#125; &#125;)()("你怎么不牛b死呢")&#125;)();( function() &#123; return (function()&#123;console.log("哈哈，我笑笑不说话");&#125;)() &#125; ) (); 方法二：使用闭包 123456789101112function show(i) &#123; return function () &#123; console.log(i) &#125;&#125;var funcs = []for (var i = 0; i &lt; 10; i++) &#123; funcs.push(show(i))&#125;funcs.forEach(function (func) &#123; func(); //0 1 2 3 4 5 6 7 8 9&#125;) 方法三：使用let 123456789var funcs = []for (let i = 0; i &lt; 10; i++) &#123; funcs.push(function () &#123; console.log(i) &#125;)&#125;funcs.forEach(function (func) &#123; func(); //依次输出0-9&#125;) 知识回顾(forEach) 123456789//forEach 回顾var numbers = [4, 9, 16, 25];numbers.forEach(function(item,index)&#123; console.log("num[" + index + "] = "+item);&#125;);// num[0] = 4// num[1] = 9// num[2] = 16// num[3] = 25]]></content>
      <categories>
        <category>面试集锦</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6总结归纳]]></title>
    <url>%2F2018%2F10%2F18%2FES6%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3%2F</url>
    <content type="text"><![CDATA[学习了ES6之后，感觉内容很多，保持二八原则，掌握好常用的、有用的这个可以让我们的开发快速起飞。 一.变量声明const和let const 和 let 的作用域为最近相邻的{} 12345678910111213function f()&#123; if(1!==1)&#123; let test = 'hello ES6'; &#125;else&#123; console.log(test); //let和const报错，var 定义的时候不报错 // var会变量提升至函数顶部 // var 时候 test = undefined； // let 和 const 报错：Uncaught ReferenceError: test is not defined &#125;&#125;f(); const定义变量之后不可以在修改值，但如果值为对象，仍可以修改对象内的赋值。 1234567891011const name = 'a'name = 'b' // 再次赋值此时会报错// Uncaught TypeError: Assignment to constant variable.const stu = &#123; id:1, name:'lei'&#125;;stu.id = 2;console.log(stu);//不会报错 TDZ(暂时性死区) 我们都知道，JS引擎扫描代码时，如果发现变量声明，用 var 声明变量时会将声明提升到函数或全局作用域的顶部。但是 let 或者 const，会将声明关进一个小黑屋也是TDZ(暂时性死区)，只有执行到变量声明这句语句时，变量才会从小黑屋被放出来，才能安全使用这个变量。 面试题 要求：更改代码，成功输出0到9； 题目代码 12345678var funcs = []for (var i = 0; i &lt; 10; i++) &#123; funcs.push(function () &#123; console.log(i) &#125;)&#125;funcs.forEach(function (func) &#123; func()&#125;)//结果输入 10次10 我的投机取巧方法 12345678var funcs = []for (var i = 0; i &lt; 10; i++) &#123; funcs.push(function () &#123; console.log(i) &#125;)&#125;funcs.forEach(function (func,index) &#123; // func() console.log(index);&#125;) 方案① 123456789//ES6处理var funcs = []for (let i = 0; i &lt; 10; i++) &#123; funcs.push(function () &#123; console.log(i) &#125;)&#125;//funcs.forEach(function (func) &#123;// func()//&#125;)funcs.forEach(func =&gt; func()) 方案② 12345678910var funcs = []for (var i = 0; i &lt; 10; i++) &#123; funcs.push( (function () &#123; console.log(i) &#125;)() )&#125;// funcs.forEach(function (func) &#123;// func()// &#125;)// 直接在push的时候调用函数 知识回顾123456789//forEach 回顾var numbers = [4, 9, 16, 25];numbers.forEach(function(item,index)&#123; console.log("num[" + index + "] = "+item);&#125;);// num[0] = 4// num[1] = 9// num[2] = 16// num[3] = 25]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次原生css3实现响应式布局 - timeLine]]></title>
    <url>%2F2018%2F10%2F06%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%9F%E7%94%9Fcss3%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-timeLine%2F</url>
    <content type="text"><![CDATA[慕课网响应式布局教程 - 时间轴实战 1.分大 - 中 - 小 三种样式 大 &gt;768px 中 425 &lt; x＜=768 小 &lt;=425px 2.老师给的设计图 我的代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!doctype html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Time-line&lt;/title&gt; &lt;link rel="stylesheet" href="./css/normalize.css"&gt; &lt;link rel="stylesheet" href="./css/main.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt; &lt;header&gt; &lt;h1 class="title"&gt;Responsive Timeline&lt;/h1&gt; &lt;/header&gt; &lt;section class="main"&gt; &lt;ul class="item-all"&gt; &lt;li class="item cleanfix"&gt; &lt;div class="item-left"&gt; &lt;span class="left-data"&gt;2018-10-05&lt;/span&gt; &lt;span class="left-time"&gt;14:10&lt;/span&gt; &lt;/div&gt; &lt;div class="item-right"&gt; &lt;div class="right-wrap"&gt; &lt;p class="right-title"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque, iste.&lt;/p&gt; &lt;p class="right-desc"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequatur eius illum libero maiores nam optio, praesentium provident sit suscipit! Aliquam animi asperiores consequuntur eaque facere, fugiat ipsa, ipsum libero magni officiis praesentium provident sequi suscipit vitae voluptatem voluptates voluptatibus. Beatae commodi cumque dignissimos doloremque ea facere id impedit ipsum iure mollitia natus pariatur, possimus quidem tempora vero? Dolorem, enim eos esse et eveniet excepturi iste laboriosam laudantium odit sit temporibus velit, veritatis voluptatem. Alias animi dicta ducimus, ipsam quidem repudiandae sint? Architecto atque beatae, consequuntur debitis nihil odit quo similique tenetur voluptates! Ad beatae, commodi illo molestiae quisquam sed veniam.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class="item cleanfix"&gt; &lt;div class="item-left"&gt; &lt;span class="left-data"&gt;2018-10-05&lt;/span&gt; &lt;span class="left-time"&gt;15:30&lt;/span&gt; &lt;/div&gt; &lt;div class="item-right"&gt; &lt;div class="right-wrap"&gt; &lt;p class="right-title"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Neque, odio.&lt;/p&gt; &lt;p class="right-desc"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur dolorum enim id maxime quas qui reprehenderit sequi unde voluptatum. Accusantium consectetur ea impedit ipsam laboriosam perspiciatis quam! Architecto asperiores dolores doloribus ducimus enim esse fuga, harum iste iure libero maiores odit, officiis quae quibusdam quis sint veniam. Aperiam cupiditate, enim esse eum exercitationem fuga iste iusto perspiciatis sequi voluptatem! Aliquid animi asperiores at corporis, dolores eligendi laudantium libero minus non nostrum odio porro quo rem repellat sapiente sed sint, unde?&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class="item cleanfix"&gt; &lt;div class="item-left"&gt; &lt;span class="left-data"&gt;2018-10-05&lt;/span&gt; &lt;span class="left-time"&gt;16:40&lt;/span&gt; &lt;/div&gt; &lt;div class="item-right"&gt; &lt;div class="right-wrap"&gt; &lt;p class="right-title"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p&gt; &lt;p class="right-desc"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur autem cumque delectus, dolor doloribus ducimus eius error esse expedita explicabo hic incidunt laboriosam laudantium non obcaecati odio quae quam, quidem rem similique sit sunt temporibus ullam veritatis voluptate voluptatem, voluptatum. Aut commodi, debitis distinctio dolorum, ducimus eius eum excepturi facere fuga impedit molestias nam odio optio praesentium quibusdam quisquam reprehenderit repudiandae rerum saepe sint suscipit totam veniam. At dolores maxime officia quas repellendus rerum tempora tenetur? Aspernatur consectetur doloremque ea inventore maxime, sequi suscipit! Distinctio et numquam temporibus.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223/** 大 &gt;768px* 中 425 &lt; x＜=768* 小 &lt;=425px*//*-----------------*/.cleanfix:before,.cleanfix:after &#123; display: table; content: ' ';&#125;.cleanfix:after &#123; clear: both;&#125;/*-----------------*/.container &#123; width: 100%; margin: 0 auto;&#125;@media screen and (min-width: 768px) &#123; .container &#123; max-width: 1080px; width: 90%; &#125;&#125;@media screen and (max-width: 768px)&#123; .container&#123; box-sizing: border-box; padding: 0 1rem; &#125;&#125;.title &#123; color: #47a3da; font-weight: 500; margin-top: 2.5rem;&#125;@media screen and (max-width: 768px)&#123; .title&#123; text-align: center; margin-top: 1.5rem; &#125;&#125;.main &#123; margin-top: 5rem; position: relative;&#125;.item-all:before &#123; position: absolute; content: ' '; width: .5rem; height: 100%; background-color: #afdcf8; left: 25%; top: 0; bottom: 0;&#125;@media screen and (max-width: 768px) and (min-width: 425px)&#123; .item-all:before &#123; left: 22%; &#125;&#125;@media screen and (max-width: 425px) &#123; .item-all:before &#123; display: none; &#125; .main &#123; margin-top: 2rem; &#125;&#125;.item-all .item:nth-child(2n) .right-wrap,.item-all .item:nth-child(2n) .item-right:before &#123; background-color: #3594CB;&#125;.item-all .item:nth-child(2n+1) .right-wrap,.item-all .item:nth-child(2n+1) .item-right:before &#123; background-color: #6CBFEE;&#125;.item-all&#123; padding: 0;&#125;.item &#123; list-style: none; position: relative; margin-bottom: 2rem;&#125;@media screen and (max-width: 768px) and (min-width: 425px)&#123; .item &#123; margin-bottom: 1rem; &#125;&#125;.item-left &#123; float: left; width: 30%; padding-right: 5rem; box-sizing: border-box; position: absolute; top: 0; bottom: 0;&#125;@media screen and (max-width: 768px) and (min-width: 425px)&#123; .item-left &#123; padding-right: 10%; &#125;&#125;.item-right &#123; float: right; width: 70%; position: relative;&#125;.left-data &#123; font-size: 1rem; color: #bdd0db; display: block; text-align: right;&#125;@media screen and (max-width: 768px) and (min-width: 425px)&#123; .left-data &#123; text-align: left; &#125;&#125;.item-all .item:nth-child(2n) .left-time &#123; color: #3594CB;&#125;.item-all .item:nth-child(2n+1) .left-time &#123; color: #6CBFEE;&#125;.left-time &#123; display: block; text-align: right; font-size: 3rem; font-weight: 400; margin-top: .2rem;&#125;@media screen and (max-width: 768px) and (min-width: 425px)&#123; .left-time &#123; font-size: 2rem; text-align: left; &#125;&#125;.right-wrap &#123; /*background-color: #6CBFEE;*/ border-radius: .4rem; padding: 2rem;&#125;.item-right:before &#123; position: absolute; content: ' '; display: block; width: 1.2rem; height: 1.2rem; /*background-color: #6CBFEE;*/ left: -.5rem; top: 2rem; transform: rotate(45deg);&#125;.right-title &#123; color: #ffffff; font-weight: 600; font-size: 1.5rem;&#125;.right-title:after &#123; content: ' '; display: block; height: 1px; background-color: #ffffff; margin-top: .8rem;&#125;.right-desc &#123; color: #ffffff; line-height: 1.5;&#125;@media screen and (max-width: 425px) &#123; .item-left &#123; float: none; width: 100%; display: block; position: relative; &#125; .item-right &#123; float: none; width: 100%; display: block; position: relative; margin-top: 1rem; &#125; .left-time&#123; text-align: left; font-size: 2rem; &#125; .left-data&#123; text-align: left; &#125; .item-right:before &#123; position: absolute; content: ' '; display: block; width: 1.2rem; height: 1.2rem; /* background-color: #6CBFEE; */ left: 2rem; top: -.5rem; transform: rotate(45deg); &#125;&#125; 老师的代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang="en" class="no-js"&gt;&lt;head&gt; &lt;meta charset="utf-8"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&gt; &lt;title&gt;Responsive Timeline&lt;/title&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;link rel="stylesheet" type="text/css" href="css/style.css"/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt; &lt;header class="clearfix"&gt; &lt;h1&gt;Responsive Timeline&lt;/h1&gt; &lt;/header&gt; &lt;div class="main"&gt; &lt;ul class="tmtimeline"&gt; &lt;li&gt; &lt;time class="tmtime"&gt;&lt;span&gt;2016-05-01&lt;/span&gt; &lt;span&gt;18:30&lt;/span&gt;&lt;/time&gt; &lt;div class="tmlabel"&gt; &lt;h2&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cupiditate, neque.&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid architecto at atque consequatur consequuntur corporis dolor facere, fuga laborum natus, nihil rem repudiandae temporibus ullam ut veniam veritatis voluptas voluptates. Aliquam assumenda eius exercitationem hic ipsa numquam quam quis ratione, repellat, reprehenderit sunt, ullam! Accusamus, ad aliquid asperiores aspernatur at consequuntur cupiditate delectus deleniti dignissimos doloremque ea enim error, et excepturi explicabo facere fuga illo impedit iste laudantium minima molestias non nulla odit optio quos repellat sequi similique tempore vel veniam, vero voluptates voluptatum! At, cum deleniti, eaque enim fugiat illo in molestiae necessitatibus non obcaecati perferendis possimus temporibus tenetur.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;time class="tmtime"&gt;&lt;span&gt;2016-04-01&lt;/span&gt; &lt;span&gt;12:30&lt;/span&gt;&lt;/time&gt; &lt;div class="tmlabel"&gt; &lt;h2&gt;Lorem ipsum dolor sit amet.&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet beatae cupiditate debitis doloribus eius eligendi, error est eveniet ipsam laborum laudantium magnam natus non omnis placeat praesentium quas repellat reprehenderit saepe soluta sunt temporibus totam vero voluptatem voluptatibus? Ab atque consequuntur cupiditate dolorum ducimus eligendi error eveniet excepturi facilis harum, in iste nihil obcaecati officiis, quas quasi qui quia quos reiciendis rem rerum sapiente totam unde voluptatibus voluptatum? Dolor dolore dolorum ducimus et fugit iusto modi odit quibusdam vitae voluptas!&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;time class="tmtime"&gt;&lt;span&gt;2016-03-21&lt;/span&gt; &lt;span&gt;11:30&lt;/span&gt;&lt;/time&gt; &lt;div class="tmlabel"&gt; &lt;h2&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. At dignissimos dolor dolores error quisquam vero, voluptatem. Accusantium consectetur consequuntur debitis dicta dolor dolores fugit laborum libero molestiae, natus nobis odit. Ab aliquid consequuntur, dolorum eius eligendi impedit ipsam neque odit, perspiciatis quis, similique unde voluptate! Corporis necessitatibus odit repellendus tempora.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;time class="tmtime"&gt;&lt;span&gt;2016-02-11&lt;/span&gt; &lt;span&gt;9:45&lt;/span&gt;&lt;/time&gt; &lt;div class="tmlabel"&gt; &lt;h2&gt;Lorem ipsum dolor sit amet, consectetur adipisicing.&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deleniti, dolorem id inventore iste odit perferendis provident? A cupiditate doloribus, enim et fuga iste nemo non nostrum omnis perspiciatis praesentium provident, quas repellendus rerum sit tempore voluptates. Aliquam distinctio fugit hic maiores ullam voluptate! Aspernatur autem blanditiis deleniti dolor dolores dolorum enim et illum ipsa iure laboriosam, natus officiis ullam voluptas?&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;time class="tmtime"&gt;&lt;span&gt;2016-02-11&lt;/span&gt; &lt;span&gt;9:45&lt;/span&gt;&lt;/time&gt; &lt;div class="tmlabel"&gt; &lt;h2&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptas?&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error eum ex iusto magnam obcaecati. Adipisci deserunt dicta dolorem ea enim et eum labore laboriosam, quos reprehenderit sequi vero vitae voluptatum.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207*, *:after, *:before &#123; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;&#125;body, html &#123; margin: 0; padding: 0; font-size: 100%;&#125;.clearfix:before,.clearfix:after &#123; content: " "; display: table;&#125;.clearfix:after &#123; clear: both;&#125;body &#123; font-family: 'Lato', Calibri, Arial, sans-serif; color: #47a3da;&#125;a &#123; color: #f0f0f0; text-decoration: none;&#125;a:hover &#123; color: #000;&#125;.main,.container &gt; header &#123; width: 96%; max-width: 70em; margin: 0 auto; padding: 0 2em 3em 2em;&#125;.container &gt; header &#123; padding: 3em 2em 2em;&#125;.container &gt; header h1 &#123; font-weight: 400;&#125;@media screen and (max-width: 55em) &#123; .main, .container &gt; header &#123; width: 98%; padding: 0 2em 1em 2em; &#125; .container &gt; header h1 &#123; text-align: center; &#125;&#125;/* Timeline */.tmtimeline &#123; position: relative; margin: 30px 0 0 0; padding: 0; list-style: none;&#125;.tmtimeline:before &#123; content: ''; position: absolute; top: 0; bottom: 0; left: 20%; width: 10px; margin-left: -10px; background: #afdcf8;&#125;.tmtimeline &gt; li &#123; position: relative;&#125;.tmtimeline &gt; li .tmtime &#123; position: absolute; display: block; width: 25%; padding-right: 100px;&#125;.tmtimeline &gt; li .tmtime span &#123; display: block; text-align: right;&#125;.tmtimeline &gt; li .tmtime span:first-child &#123; font-size: 0.9em; color: #bdd0db;&#125;.tmtimeline &gt; li .tmtime span:last-child &#123; font-size: 2.9em; color: #3594cb;&#125;.tmtimeline &gt; li:nth-child(odd) .tmtime span:last-child &#123; color: #6cbfee;&#125;.tmtimeline &gt; li .tmlabel &#123; position: relative; margin: 0 0 15px 25%; padding: 2em; color: #fff; font-size: 1.2em; font-weight: 300; line-height: 1.4; border-radius: 5px; background: #3594cb;&#125;.tmtimeline &gt; li:nth-child(odd) .tmlabel &#123; background: #6cbfee;&#125;.tmtimeline &gt; li .tmlabel h2 &#123; margin-top: 0; padding: 0 0 10px 0; border-bottom: 1px solid rgba(255, 255, 255, 0.4);&#125;.tmtimeline &gt; li .tmlabel:after &#123; content: " "; position: absolute; top: 10px; right: 100%; height: 0; width: 0; pointer-events: none; border: 10px solid transparent; border-right-color: #3594cb;&#125;.tmtimeline &gt; li:nth-child(odd) .tmlabel:after &#123; border-right-color: #6cbfee;&#125;@media screen and (max-width: 55em) &#123; .tmtimeline &gt; li .tmtime &#123; padding-right: 65px; &#125; .tmtimeline &gt; li .tmtime span:last-child &#123; font-size: 1.5em; &#125;&#125;@media screen and (max-width: 40em) &#123; .tmtimeline:before &#123; display: none; &#125; .tmtimeline &gt; li .tmtime &#123; position: relative; width: 100%; padding: 0 0 20px 0; &#125; .tmtimeline &gt; li .tmtime span &#123; text-align: left; &#125; .tmtimeline &gt; li .tmlabel &#123; margin: 0 0 30px 0; padding: 1em; font-weight: 400; font-size: 95%; &#125; .tmtimeline &gt; li .tmlabel:after &#123; top: -20px; right: auto; left: 20px; border-right-color: transparent; border-bottom-color: #3594cb; &#125; .tmtimeline &gt; li:nth-child(odd) .tmlabel:after &#123; border-right-color: transparent; border-bottom-color: #6cbfee; &#125; .tmtimeline &gt; li .tmicon &#123; position: relative; float: right; left: auto; margin: -55px 5px 0 0; &#125;&#125; normalizenormalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css *//** * 1. Change the default font family in all browsers (opinionated). * 2. Prevent adjustments of font size after orientation changes in IE and iOS. */html &#123; font-family: sans-serif; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */&#125;/** * Remove the margin in all browsers (opinionated). */body &#123; margin: 0;&#125;/* HTML5 display definitions ========================================================================== *//** * Add the correct display in IE 9-. * 1. Add the correct display in Edge, IE, and Firefox. * 2. Add the correct display in IE. */article,aside,details, /* 1 */figcaption,figure,footer,header,main, /* 2 */menu,nav,section,summary &#123; /* 1 */ display: block;&#125;/** * Add the correct display in IE 9-. */audio,canvas,progress,video &#123; display: inline-block;&#125;/** * Add the correct display in iOS 4-7. */audio:not([controls]) &#123; display: none; height: 0;&#125;/** * Add the correct vertical alignment in Chrome, Firefox, and Opera. */progress &#123; vertical-align: baseline;&#125;/** * Add the correct display in IE 10-. * 1. Add the correct display in IE. */template, /* 1 */[hidden] &#123; display: none;&#125;/* Links ========================================================================== *//** * 1. Remove the gray background on active links in IE 10. * 2. Remove gaps in links underline in iOS 8+ and Safari 8+. */a &#123; background-color: transparent; /* 1 */ -webkit-text-decoration-skip: objects; /* 2 */&#125;/** * Remove the outline on focused links when they are also active or hovered * in all browsers (opinionated). */a:active,a:hover &#123; outline-width: 0;&#125;/* Text-level semantics ========================================================================== *//** * 1. Remove the bottom border in Firefox 39-. * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */abbr[title] &#123; border-bottom: none; /* 1 */ text-decoration: underline; /* 2 */ text-decoration: underline dotted; /* 2 */&#125;/** * Prevent the duplicate application of `bolder` by the next rule in Safari 6. */b,strong &#123; font-weight: inherit;&#125;/** * Add the correct font weight in Chrome, Edge, and Safari. */b,strong &#123; font-weight: bolder;&#125;/** * Add the correct font style in Android 4.3-. */dfn &#123; font-style: italic;&#125;/** * Correct the font size and margin on `h1` elements within `section` and * `article` contexts in Chrome, Firefox, and Safari. */h1 &#123; font-size: 2em; margin: 0.67em 0;&#125;/** * Add the correct background and color in IE 9-. */mark &#123; background-color: #ff0; color: #000;&#125;/** * Add the correct font size in all browsers. */small &#123; font-size: 80%;&#125;/** * Prevent `sub` and `sup` elements from affecting the line height in * all browsers. */sub,sup &#123; font-size: 75%; line-height: 0; position: relative; vertical-align: baseline;&#125;sub &#123; bottom: -0.25em;&#125;sup &#123; top: -0.5em;&#125;/* Embedded content ========================================================================== *//** * Remove the border on images inside links in IE 10-. */img &#123; border-style: none;&#125;/** * Hide the overflow in IE. */svg:not(:root) &#123; overflow: hidden;&#125;/* Grouping content ========================================================================== *//** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */code,kbd,pre,samp &#123; font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */&#125;/** * Add the correct margin in IE 8. */figure &#123; margin: 1em 40px;&#125;/** * 1. Add the correct box sizing in Firefox. * 2. Show the overflow in Edge and IE. */hr &#123; box-sizing: content-box; /* 1 */ height: 0; /* 1 */ overflow: visible; /* 2 */&#125;/* Forms ========================================================================== *//** * 1. Change font properties to `inherit` in all browsers (opinionated). * 2. Remove the margin in Firefox and Safari. */button,input,select,textarea &#123; font: inherit; /* 1 */ margin: 0; /* 2 */&#125;/** * Restore the font weight unset by the previous rule. */optgroup &#123; font-weight: bold;&#125;/** * Show the overflow in IE. * 1. Show the overflow in Edge. */button,input &#123; /* 1 */ overflow: visible;&#125;/** * Remove the inheritance of text transform in Edge, Firefox, and IE. * 1. Remove the inheritance of text transform in Firefox. */button,select &#123; /* 1 */ text-transform: none;&#125;/** * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video` * controls in Android 4. * 2. Correct the inability to style clickable types in iOS and Safari. */button,html [type="button"], /* 1 */[type="reset"],[type="submit"] &#123; -webkit-appearance: button; /* 2 */&#125;/** * Remove the inner border and padding in Firefox. */button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner &#123; border-style: none; padding: 0;&#125;/** * Restore the focus styles unset by the previous rule. */button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring &#123; outline: 1px dotted ButtonText;&#125;/** * Change the border, margin, and padding in all browsers (opinionated). */fieldset &#123; border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em;&#125;/** * 1. Correct the text wrapping in Edge and IE. * 2. Correct the color inheritance from `fieldset` elements in IE. * 3. Remove the padding so developers are not caught out when they zero out * `fieldset` elements in all browsers. */legend &#123; box-sizing: border-box; /* 1 */ color: inherit; /* 2 */ display: table; /* 1 */ max-width: 100%; /* 1 */ padding: 0; /* 3 */ white-space: normal; /* 1 */&#125;/** * Remove the default vertical scrollbar in IE. */textarea &#123; overflow: auto;&#125;/** * 1. Add the correct box sizing in IE 10-. * 2. Remove the padding in IE 10-. */[type="checkbox"],[type="radio"] &#123; box-sizing: border-box; /* 1 */ padding: 0; /* 2 */&#125;/** * Correct the cursor style of increment and decrement buttons in Chrome. */[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button &#123; height: auto;&#125;/** * 1. Correct the odd appearance in Chrome and Safari. * 2. Correct the outline style in Safari. */[type="search"] &#123; -webkit-appearance: textfield; /* 1 */ outline-offset: -2px; /* 2 */&#125;/** * Remove the inner padding and cancel buttons in Chrome and Safari on OS X. */[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration &#123; -webkit-appearance: none;&#125;/** * Correct the text style of placeholders in Chrome, Edge, and Safari. */::-webkit-input-placeholder &#123; color: inherit; opacity: 0.54;&#125;/** * 1. Correct the inability to style clickable types in iOS and Safari. * 2. Change font properties to `inherit` in Safari. */::-webkit-file-upload-button &#123; -webkit-appearance: button; /* 1 */ font: inherit; /* 2 */&#125;]]></content>
      <categories>
        <category>布局艺术</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[display: inline-block 导致换行]]></title>
    <url>%2F2018%2F10%2F02%2Fdisplay-inline-block-%E5%AF%BC%E8%87%B4%E6%8D%A2%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[display: inline-block 时候，70% + 30% &gt; 100% 换行原因:标签与标签之间的换行会占据一定大小。 比如:123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;`display: inline-block`导致换行&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; &#125; .containter .item:nth-child(1) &#123; display: inline-block; width: 33.3333333333333333333%; background-color: red; height: 100px; &#125; .containter .item:nth-child(2) &#123; display: inline-block; width: 33.3333333333333333333%; background-color: yellow; height: 100px; &#125; .containter .item:nth-child(3) &#123; display: inline-block; width: 33.3333333333333333333%; background-color: blue; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="containter"&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;!-- 因为item div之后的换行导致 --&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 解决方法: 123.containter &#123; font-size: 0;&#125;]]></content>
      <categories>
        <category>布局艺术</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[box-shadow 的参数（模糊距离与阴影尺寸的区别）]]></title>
    <url>%2F2018%2F10%2F02%2Fbox-shadow-%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%88%E6%A8%A1%E7%B3%8A%E8%B7%9D%E7%A6%BB%E4%B8%8E%E9%98%B4%E5%BD%B1%E5%B0%BA%E5%AF%B8%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89%2F</url>
    <content type="text"><![CDATA[box-shadow: h-shadow v-shadow blur spread color inset; box-shadow: 水平位移 垂直位移 模糊距离 阴影尺寸 color inset; 阴影尺寸:增加边框的宽度(不占据k空间) 模糊距离:模糊的圆的半径 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .shadow &#123; box-shadow:green 0 0 100px ; height: 100px; width: 100px; margin: 30px; float: left; &#125; .shadow_inset&#123; box-shadow: 0 0 100px red inset ; height: 100px; width: 100px; margin: 30px; float: left; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="shadow"&gt; &lt;/div&gt; &lt;div class="shadow_inset"&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[慕课 [所向披靡的响应式] 学习笔记]]></title>
    <url>%2F2018%2F10%2F02%2F%E6%85%95%E8%AF%BE-%E6%89%80%E5%90%91%E6%8A%AB%E9%9D%A1%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[教程地址：慕课-所向披靡的响应式开发 1.判断IE版本 -&gt; IE低版本提示兼容,更新浏览器 123&lt;!--[if lte IE 8]&gt;&lt;p&gt;版本低&lt;/p&gt;&lt;![endif]--&gt; 2.lte 小于等于,gte 大于等于 3.id-&gt;首字母小写的驼峰命名,class-&gt; -连接单词 4.必不可少的图片img引入,k而有可无的装饰性图片css中用样式引入 5.选择文本之后的样式设置 1234::selection&#123; background-color: red; text-shadow: none;&#125; 6.清除浮动的方法 - 触发BFC 尾部添加div 1&lt;div style="clear:both;"&gt;&lt;/div&gt; 父元素设置样式(子元素设置了浮动) 1overfloat:hidden;//auto 或 1float:left; 最佳方法,在父元素结点上加入类clearfix,然后通过after除 1234567.clearfix:after&#123; content: ' '; display: block; height: 0; visibility: hidden; clear: both;&#125; 改进: 12345.clearfix:after&#123; content: ' '; display: table; clear: both;&#125; 7.防止上下margin叠加 12345678.clearfix:after,.clearfix:before&#123; content: ' '; display: table;&#125;.clearfix:after&#123; clear: both;&#125; 8.line-height设置高度为rem单位时候会出现高度不符合预期,尽量用px设置(因为浏览器有字体大小下限) 9.第一个li不设置左边框,后面的li设置:+ 1ul li + li&#123;&#125; 10.display: inline-block导致换行:标签与标签之间的换行会占据一定大小,导致换行. 比如:123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;`display: inline-block`导致换行&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; &#125; .containter .item:nth-child(1) &#123; display: inline-block; width: 33.3333333333333333333%; background-color: red; height: 100px; &#125; .containter .item:nth-child(2) &#123; display: inline-block; width: 33.3333333333333333333%; background-color: yellow; height: 100px; &#125; .containter .item:nth-child(3) &#123; display: inline-block; width: 33.3333333333333333333%; background-color: blue; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="containter"&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;!-- 因为item div之后的换行导致 --&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 解决方法: 123.containter &#123; font-size: 0;&#125; 11.文本一行显示,超过的省略号截断.123text-overflow: ellipsis;overflow: hidden;white-space: nowrap; 12.为css自动加入浏览器识别前缀:autoprefixer 13.媒体查询 所以设置的常有：1234@media screen and (min-width:1200px)@media screen and (min-width:992px)@media screen and (min-width:768px)@media screen and (min-width:480px) 14.响应式图片 为了兼容所有低版本浏览器,引入picturefill库 12345&lt;picture&gt; &lt;source srcset="bigest.png" media="(min-width:50em)"&gt; &lt;source srcset="big.png" media="(min-width:30em)"&gt; &lt;img srcset="other.png" alt=""&gt;&lt;/picture&gt; 15.在线压缩图片:pngtiny 16.nodejs和npm npm install xxx -&gt; npm i xxxnpm i xxx -gnpm i xxx --savenpm i xxx --save-dev 17.modernizr 18.caniuse 19.browsersync 20.gulpjs 21.Webstorm常用 &gt;,+,^,*,() #,.,[] $ {},loremctrl + back 删除当前行ctrl + alt + 回车 在上方插入一行ctrl + +/- 折叠/打开代码ctrl + shift + +/- 折叠/打开所有代码]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
